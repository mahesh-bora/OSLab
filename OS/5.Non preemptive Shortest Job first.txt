#include <stdio.h>
 
struct Process {
    int pid;            
    int arrival_time;    
    int burst_time;     
};
 
void sjf_scheduling(struct Process processes[], int n) {
    int waiting_time[n], turnaround_time[n], completion_time[n];
    int total_waiting_time = 0, total_turnaround_time = 0;
    int current_time = 0;

    completion_time[0] = processes[0].burst_time;
    waiting_time[0] = 0;
    turnaround_time[0] = completion_time[0] - processes[0].arrival_time;
    total_waiting_time += waiting_time[0];
    total_turnaround_time += turnaround_time[0];
    current_time = completion_time[0];

     for (int i = 1; i < n; i++) {
        int shortest_process = i;
        for (int j = i + 1; j < n; j++) {
            if (processes[j].burst_time < processes[shortest_process].burst_time) {
                shortest_process = j;
            }
        }
        struct Process temp = processes[i];
        processes[i] = processes[shortest_process];
        processes[shortest_process] = temp;
 
        completion_time[i] = current_time + processes[i].burst_time;
 
        waiting_time[i] = current_time - processes[i].arrival_time;
        turnaround_time[i] = completion_time[i] - processes[i].arrival_time;

        current_time += processes[i].burst_time;
        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }
 
    printf("Gantt Chart:\n");
    printf("-----------\n");
    printf(" ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++)
            printf("--");
        printf(" ");
    }
    printf("\n|");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time - 1; j++)
            printf(" ");
        printf("P%d", processes[i].pid);
        for (int j = 0; j < processes[i].burst_time - 1; j++)
            printf(" ");
        printf("|");
    }
    printf("\n ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++)
            printf("--");
        printf(" ");
    }
    printf("\n");
    printf("0");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++)
            printf("  ");
        if (completion_time[i] > 9)
            printf("\b");
        printf("%d", completion_time[i]);
    }
    printf("\n\n");

    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time,
               processes[i].burst_time, waiting_time[i], turnaround_time[i]);
    }

    float avg_waiting_time = (float) total_waiting_time / n;
    float avg_turnaround_time = (float) total_turnaround_time / n;
    printf("\nAverage Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
    }

    sjf_scheduling(processes, n);

    return 0;
}
