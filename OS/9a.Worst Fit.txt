#include <stdio.h>
#include <stdlib.h>

void implementWorstFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[processes];
    int occupied[blocks];

    for (int i = 0; i < processes; i++) {
        allocation[i] = -1;
    }
    for (int i = 0; i < blocks; i++) {
        occupied[i] = 0;
    }
    
    for (int i = 0; i < processes; i++) {
        int indexPlaced = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i] && !occupied[j]) {
                if (indexPlaced == -1 || blockSize[indexPlaced] < blockSize[j]) {
                    indexPlaced = j;
                }
            }
        }
        if (indexPlaced != -1) {
            allocation[i] = indexPlaced;
            occupied[indexPlaced] = 1;
            blockSize[indexPlaced] -= processSize[i];
        }
    }
    
    printf("\nProcess No.\tProcess Size\t\t\tBlock no.\tInternal Fragmentation\n");
    for (int i = 0; i < processes; i++) {
        printf("%d \t\t\t %d \t\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1) {
            printf("%d \t\t\t%d\n", allocation[i] + 1, blockSize[allocation[i]]);
        } else {
            printf("Not Allocated\t\tN/A\n");
        }
    }
}

int main() {
    int blocks, processes;
    printf("Enter the number of blocks: ");
    scanf("%d", &blocks);
    int *blockSize = (int *)malloc(blocks * sizeof(int));
    printf("Enter the block sizes:\n");
    for (int i = 0; i < blocks; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }
    printf("Enter the number of processes: ");
    scanf("%d", &processes);
    int *processSize = (int *)malloc(processes * sizeof(int));
    printf("Enter the process sizes:\n");
    for (int i = 0; i < processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }
    implementWorstFit(blockSize, blocks, processSize, processes);
    free(blockSize);
    free(processSize);
    return 0;
}
