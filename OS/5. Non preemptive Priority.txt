#include &lt;stdio.h&gt;

struct Process {
int pid;
int arrival_time;
int burst_time;
int priority;
int waiting_time;
int turnaround_time;
};

void sortProcessesByArrivalTime(struct Process processes[], int n) {
struct Process temp;
int i, j;
for (i = 0; i &lt; n - 1; i++) {
for (j = 0; j &lt; n - i - 1; j++) {

if (processes[j].arrival_time &gt; processes[j + 1].arrival_time) {
temp = processes[j];
processes[j] = processes[j + 1];
processes[j + 1] = temp;
}
}
}
}

void sortProcessesByPriority(struct Process processes[], int n) {
struct Process temp;
int i, j;
for (i = 0; i &lt; n - 1; i++) {
for (j = 0; j &lt; n - i - 1; j++) {
if (processes[j].priority &gt; processes[j + 1].priority) {
temp = processes[j];
processes[j] = processes[j + 1];
processes[j + 1] = temp;
}
}
}
}

void calculateWaitingTime(struct Process processes[], int n) {

processes[0].waiting_time = 0;

for (int i = 1; i &lt; n; i++) {
processes[i].waiting_time = processes[i - 1].waiting_time + processes[i -
1].burst_time;
}
}

void calculateTurnaroundTime(struct Process processes[], int n) {
for (int i = 0; i &lt; n; i++) {
processes[i].turnaround_time = processes[i].waiting_time +
processes[i].burst_time;
}
}

void displayGanttChart(struct Process processes[], int n) {
int i, j;
int total_burst_time = 0;
for (i = 0; i &lt; n; i++) {
total_burst_time += processes[i].burst_time;
}

int timeline[total_burst_time];
for (i = 0; i &lt; total_burst_time; i++) {
timeline[i] = -1;

}

int current_time = 0;
for (i = 0; i &lt; n; i++) {
for (j = 0; j &lt; processes[i].burst_time; j++) {
timeline[current_time++] = processes[i].pid;
}
}

printf(&quot;Gantt Chart:\n&quot;);

for (i = 0; i &lt; total_burst_time; i++) {
printf(&quot;___&quot;);
}
printf(&quot;\n&quot;);

int prev = -1;
for (i = 0; i &lt; total_burst_time; i++) {
if (timeline[i] != prev) {
printf(&quot;|P%d &quot;, timeline[i]);
} else {
printf(&quot; &quot;);
}
prev = timeline[i];

}

printf(&quot;|\n &quot;);
for (i = 0; i &lt; total_burst_time; i++) {
printf(&quot;___&quot;);
}
printf(&quot;\n&quot;);

printf(&quot;0&quot;);
for (i = 1; i &lt; total_burst_time; i++) {
if (timeline[i] != timeline[i - 1]) {
printf(&quot;%2d &quot;, i);
} else {
printf(&quot; &quot;);
}
}
printf(&quot;%2d&quot;,i);
printf(&quot;\n&quot;);
}

void displayTable(struct Process processes[], int n) {
printf(&quot;\nProcess\tBurst Time\tArrival Time\tWaiting Time\tTurnaround
Time\n&quot;);
for (int i = 0; i &lt; n; i++) {
printf(&quot;%d\t%d\t\t%d\t\t%d\t\t%d\n&quot;,

processes[i].pid,
processes[i].burst_time,
processes[i].arrival_time,
processes[i].waiting_time,
processes[i].turnaround_time);
}
}

float calculateAverageWaitingTime(struct Process processes[], int n) {
int total_waiting_time = 0;
for (int i = 0; i &lt; n; i++) {
total_waiting_time += processes[i].waiting_time;
}
return (float) total_waiting_time / n;
}

float calculateAverageTurnaroundTime(struct Process processes[], int n) {
int total_turnaround_time = 0;
for (int i = 0; i &lt; n; i++) {
total_turnaround_time += processes[i].turnaround_time;
}
return (float) total_turnaround_time / n;
}

int main() {
int n;
printf(&quot;Enter the number of processes: &quot;);
scanf(&quot;%d&quot;, &amp;n);

struct Process processes[n];
int i;
for (i = 0; i &lt; n; i++) {
printf(&quot;Process %d:\n&quot;, i + 1);
processes[i].pid = i + 1;
printf(&quot; Arrival Time: &quot;);
scanf(&quot;%d&quot;, &amp;processes[i].arrival_time);
printf(&quot; Burst Time: &quot;);
scanf(&quot;%d&quot;, &amp;processes[i].burst_time);
printf(&quot; Priority: &quot;);
scanf(&quot;%d&quot;, &amp;processes[i].priority);
}

sortProcessesByArrivalTime(processes, n);
sortProcessesByPriority(processes, n);
calculateWaitingTime(processes, n);
calculateTurnaroundTime(processes, n);

displayGanttChart(processes, n);

displayTable(processes, n);

float avg_waiting_time = calculateAverageWaitingTime(processes, n);
float avg_turnaround_time = calculateAverageTurnaroundTime(processes, n);

printf(&quot;\nAverage Waiting Time: %.2f\n&quot;, avg_waiting_time);
printf(&quot;Average Turnaround Time: %.2f\n&quot;, avg_turnaround_time);

return 0;
}