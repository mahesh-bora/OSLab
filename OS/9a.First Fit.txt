#include <stdio.h>
#include <stdlib.h>

void implementFirstFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[processes];
    int occupied[blocks];

    for (int i = 0; i < processes; i++) {
        allocation[i] = -1;
    }

    for (int i = 0; i < blocks; i++) {
        occupied[i] = 0;
    }

    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i] && !occupied[j]) {
                allocation[i] = j;
                occupied[j] = 1;
                // Calculate internal fragmentation
                int internalFragmentation = blockSize[j] - processSize[i];
                blockSize[j] -= processSize[i];
                printf("Allocated Process %d to Block %d (Internal Fragmentation: %d)\n", i + 1, j + 1, internalFragmentation);
                break;
            }
        }
    }

    printf("\nProcess No.\tProcess Size\t\t\tBlock no.\n");
    for (int i = 0; i < processes; i++) {
        printf("%d \t\t\t %d \t\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int blocks, processes;

    printf("Enter the number of blocks: ");
    scanf("%d", &blocks);

    int *blockSize = (int *)malloc(blocks * sizeof(int));

    printf("Enter the block sizes:\n");
    for (int i = 0; i < blocks; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &processes);

    int *processSize = (int *)malloc(processes * sizeof(int));

    printf("Enter the process sizes:\n");
    for (int i = 0; i < processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

    implementFirstFit(blockSize, blocks, processSize, processes);

    free(blockSize);
    free(processSize);

    return 0;
}
